<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\FTC_Hexacopter.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\FTC_Hexacopter.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sun Jul 09 16:16:37 2017
<BR><P>
<H3>Maximum Stack Usage =        132 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; FTC_Param::Init() &rArr; FTC_Param::SAVE_PID() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[185]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[10]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">HardFault_Handler</a><BR>
 <LI><a href="#[16]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">PendSV_Handler</a><BR>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2a]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[40]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[41]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[44]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[1a]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3d]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3e]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">USART3_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[43]">FTC_PID::FTC_PID()</a> from ftc_flycontrol.o(i._ZN7FTC_PIDC1Ev) referenced from ftc_flycontrol.o(.text)
 <LI><a href="#[4e]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[4a]">__sti___10_FTC_RC_cpp_rc</a> from ftc_rc.o(.text) referenced from ftc_rc.o(.init_array)
 <LI><a href="#[48]">__sti___11_FTC_IMU_cpp_imu</a> from ftc_imu.o(.text) referenced from ftc_imu.o(.init_array)
 <LI><a href="#[46]">__sti___14_FTC_Config_cpp_ftc</a> from ftc_config.o(.text) referenced from ftc_config.o(.init_array)
 <LI><a href="#[49]">__sti___17_FTC_Navgation_cpp_nav</a> from ftc_navgation.o(.text) referenced from ftc_navgation.o(.init_array)
 <LI><a href="#[4b]">__sti___17_FTC_Scheduler_cpp_463cec18</a> from ftc_scheduler.o(.text) referenced from ftc_scheduler.o(.init_array)
 <LI><a href="#[4d]">__sti___18_FTC_Drv_MS5611_cpp_ms5611</a> from ftc_drv_ms5611.o(.text) referenced from ftc_drv_ms5611.o(.init_array)
 <LI><a href="#[47]">__sti___18_FTC_FlyControl_cpp_fc</a> from ftc_flycontrol.o(.text) referenced from ftc_flycontrol.o(.init_array)
 <LI><a href="#[4c]">__sti___19_FTC_Drv_MPU6050_cpp_mpu6050</a> from ftc_drv_mpu6050.o(.text) referenced from ftc_drv_mpu6050.o(.init_array)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[50]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[52]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1af]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b0]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[53]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[1b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[58]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[54]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[5d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1c8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1ca]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1cb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[51]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1cc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[55]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[57]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1cd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[59]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FTC_Param::Init() &rArr; FTC_Param::SAVE_PID() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1ce]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[186]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5a]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftccopter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = main &rArr; FTC_Param::Init() &rArr; FTC_Param::SAVE_PID() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::Init()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Init()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::Init()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[69]"></a>FTC_Config::FTC_Config()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftc_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_FTC_Config_cpp_ftc
</UL>

<P><STRONG><a name="[1d0]"></a>FTC_Config::FTC_Config__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_config.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>FTC_Config::Pilot_Light()</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, ftc_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::OFF2()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::OFF1()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::ON2()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::ON1()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[6a]"></a>FTC_DT::Send_Data(unsigned char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Senser(short, short, short, short, short, short, short, short, short)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Senser2(int, unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_MotoPWM(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Power(unsigned short, unsigned short)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Check(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6c]"></a>FTC_DT::Send_Check(unsigned char, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[6d]"></a>FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)</STRONG> (Thumb, 1222 bytes, Stack size 64 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_PID()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::PID_Reset()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians(float)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Check(unsigned char, unsigned char)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check_Event()
</UL>

<P><STRONG><a name="[79]"></a>FTC_DT::Check_Event()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check_Event()
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_1000Hz()
</UL>

<P><STRONG><a name="[7b]"></a>FTC_DT::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[7d]"></a>FTC_DT::Send_Power(unsigned short, unsigned short)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[7e]"></a>FTC_DT::Send_MotoPWM(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[7f]"></a>FTC_DT::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[80]"></a>FTC_DT::Send_Senser2(int, unsigned short)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[81]"></a>FTC_DT::Send_Senser(short, short, short, short, short, short, short, short, short)</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[82]"></a>FTC_DT::Send_Status(float, float, float, int, unsigned char, unsigned char)</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[83]"></a>FTC_DT::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[84]"></a>FTC_DT::Data_Exchange()</STRONG> (Thumb, 888 bytes, Stack size 64 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Motor::getPWM(short*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Version(unsigned char, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Senser(short, short, short, short, short, short, short, short, short)
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Senser2(int, unsigned short)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_RCData(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_MotoPWM(unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Power(unsigned short, unsigned short)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_1000Hz()
</UL>

<P><STRONG><a name="[de]"></a>FTC_DT::Failsafe_Check()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ftc_dt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[86]"></a>FTC_Filter::LPF_1st_Factor_Cal(float, float)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, ftc_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_Filter::LPF_1st_Factor_Cal(float, float) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::filter_Init()
</UL>

<P><STRONG><a name="[87]"></a>FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ftc_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::filter_Init()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::filter_Init()
</UL>

<P><STRONG><a name="[88]"></a>FTC_Filter::CF_Factor_Cal(float, float)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ftc_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTC_Filter::CF_Factor_Cal(float, float) &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::filter_Init()
</UL>

<P><STRONG><a name="[89]"></a>FTC_Filter::LPF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, ftc_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[8d]"></a>FTC_Filter::LPF_2nd(FTC_Filter::LPF2ndData_t*, Vector3&lang;float&rang;)</STRONG> (Thumb, 156 bytes, Stack size 152 bytes, ftc_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[8f]"></a>FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ftc_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[90]"></a>FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, ftc_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[91]"></a>FTC_Filter::CF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 78 bytes, Stack size 88 bytes, ftc_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[6e]"></a>FTC_FlyControl::PID_Reset()</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, ftc_flycontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FTC_FlyControl::PID_Reset() &rArr; FTC_PID::set_pid(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PID::set_pid(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::FTC_FlyControl()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[93]"></a>FTC_FlyControl::FTC_FlyControl()</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ftc_flycontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_FlyControl::FTC_FlyControl() &rArr; FTC_FlyControl::PID_Reset() &rArr; FTC_PID::set_pid(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::PID_Reset()
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_FTC_FlyControl_cpp_fc
</UL>

<P><STRONG><a name="[1d1]"></a>FTC_FlyControl::FTC_FlyControl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_flycontrol.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>FTC_FlyControl::AltHoldReset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_flycontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>

<P><STRONG><a name="[97]"></a>FTC_FlyControl::Attitude_Outter_Loop()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ftc_flycontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Motor::writeMotor(unsigned short, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_200Hz()
</UL>

<P><STRONG><a name="[d7]"></a>FTC_FlyControl::Attitude_Inner_Loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftc_flycontrol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_500Hz()
</UL>

<P><STRONG><a name="[df]"></a>FTC_FlyControl::Altitude_Outter_Loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftc_flycontrol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[e0]"></a>FTC_FlyControl::Altitude_Inner_Loop()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftc_flycontrol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[99]"></a>FTC_IMU::FTC_IMU()</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ftc_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTC_IMU::FTC_IMU() &rArr; FTC_Filter::LPF4thData_t::LPF4thData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF4thData_t::LPF4thData_t()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF2ndData_t::LPF2ndData_t()
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_FTC_IMU_cpp_imu
</UL>

<P><STRONG><a name="[1d2]"></a>FTC_IMU::FTC_IMU__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_imu.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>FTC_IMU::sensor_Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FTC_IMU::sensor_Init() &rArr; FTC_MPU6050::Init(unsigned short, unsigned short) &rArr; FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char) &rArr; FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Init(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Init()
</UL>

<P><STRONG><a name="[9f]"></a>FTC_IMU::filter_Init()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ftc_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTC_IMU::filter_Init() &rArr; FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_Factor_Cal(float, float)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st_Factor_Cal(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Init()
</UL>

<P><STRONG><a name="[62]"></a>FTC_IMU::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FTC_IMU::Init() &rArr; FTC_IMU::filter_Init() &rArr; FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::filter_Init()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::sensor_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>FTC_IMU::updateSensor()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ftc_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Get_Gyro()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Get_Acc()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Gyro_Data()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Acc_Data()
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_500Hz()
</UL>

<P><STRONG><a name="[ae]"></a>FTC_IMU::DCM_CF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ftc_imu.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[a5]"></a>FTC_IMU::getDeltaT(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, ftc_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[a9]"></a>FTC_IMU::getAttitude()</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, ftc_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Get_Gyro_in_dps(Vector3&lang;float&rang;)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::Vector3()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getDeltaT(unsigned)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::DCM_CF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd(FTC_Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_500Hz()
</UL>

<P><STRONG><a name="[af]"></a>FTC_IMU::Get_Accel_Ef()</STRONG> (Thumb, 114 bytes, Stack size 72 bytes, ftc_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[1d3]"></a>FTC_IMU::Quaternion_CF(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ftc_imu.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>FTC_Motor::writeMotor(unsigned short, int, int, int)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ftc_motor.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::SetPwm(short*)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_uint16(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::Attitude_Outter_Loop()
</UL>

<P><STRONG><a name="[85]"></a>FTC_Motor::getPWM(short*)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ftc_motor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
</UL>

<P><STRONG><a name="[1d4]"></a>FTC_Motor::ResetPWM()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ftc_motor.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>FTC_Navgation::FTC_Navgation()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, ftc_navgation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTC_Navgation::FTC_Navgation() &rArr; FTC_Filter::LPF2ndData_t::LPF2ndData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF2ndData_t::LPF2ndData_t()
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_FTC_Navgation_cpp_nav
</UL>

<P><STRONG><a name="[1d5]"></a>FTC_Navgation::FTC_Navgation__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_navgation.o(.text), UNUSED)

<P><STRONG><a name="[b6]"></a>FTC_Navgation::sensor_Init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftc_navgation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FTC_Navgation::sensor_Init() &rArr; FTC_MS5611::Init() &rArr; FTC_MS5611::Read_Prom() &rArr; FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::Init()
</UL>

<P><STRONG><a name="[b8]"></a>FTC_Navgation::filter_Init()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ftc_navgation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTC_Navgation::filter_Init() &rArr; FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*) &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::Init()
</UL>

<P><STRONG><a name="[63]"></a>FTC_Navgation::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_navgation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FTC_Navgation::Init() &rArr; FTC_Navgation::sensor_Init() &rArr; FTC_MS5611::Init() &rArr; FTC_MS5611::Read_Prom() &rArr; FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::filter_Init()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::sensor_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>FTC_Navgation::update()</STRONG> (Thumb, 1904 bytes, Stack size 192 bytes, ftc_navgation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Put_Char(unsigned char)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Get_BaroAlt()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_int32(int, int, int)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;applyDeadband(int, int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Get_Accel_Ef()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_500Hz()
</UL>

<P><STRONG><a name="[c7]"></a>FTC_Navgation::Reset()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ftc_navgation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
</UL>

<P><STRONG><a name="[c8]"></a>FTC_Param::SAVE_FirstInitFlag()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FTC_Param::SAVE_FirstInitFlag() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::Init()
</UL>

<P><STRONG><a name="[ca]"></a>FTC_Param::READ_GYRO_OFFSET()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_Param::READ_GYRO_OFFSET() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_CONF()
</UL>

<P><STRONG><a name="[cc]"></a>FTC_Param::READ_ACC_OFFSET()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_Param::READ_ACC_OFFSET() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_CONF()
</UL>

<P><STRONG><a name="[cd]"></a>FTC_Param::READ_PID()</STRONG> (Thumb, 552 bytes, Stack size 16 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_Param::READ_PID() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_CONF()
</UL>

<P><STRONG><a name="[ce]"></a>FTC_Param::READ_CONF()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FTC_Param::READ_CONF() &rArr; FTC_Param::READ_PID() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_PID()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_ACC_OFFSET()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_GYRO_OFFSET()
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::Init()
</UL>

<P><STRONG><a name="[6f]"></a>FTC_Param::SAVE_PID()</STRONG> (Thumb, 542 bytes, Stack size 16 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FTC_Param::SAVE_PID() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::Init()
</UL>

<P><STRONG><a name="[cf]"></a>FTC_Param::READ_FirstInitFlag()</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_Param::READ_FirstInitFlag() &rArr; EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::Init()
</UL>

<P><STRONG><a name="[61]"></a>FTC_Param::Init()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ftc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FTC_Param::Init() &rArr; FTC_Param::SAVE_PID() &rArr; EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_FirstInitFlag()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_CONF()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_FirstInitFlag()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_PID()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>FTC_Param::SAVE_ACC_OFFSET()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ftc_param.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
</UL>

<P><STRONG><a name="[d1]"></a>FTC_Param::SAVE_GYRO_OFFSET()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ftc_param.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
</UL>

<P><STRONG><a name="[d3]"></a>FTC_RC::Init()</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, ftc_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTC_RC::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::FTC_RC()
</UL>

<P><STRONG><a name="[d2]"></a>FTC_RC::FTC_RC()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FTC_RC::FTC_RC() &rArr; FTC_RC::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_FTC_RC_cpp_rc
</UL>

<P><STRONG><a name="[1d6]"></a>FTC_RC::FTC_RC__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_rc.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>FTC_RC::Cal_Command()</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, ftc_rc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_uint16(unsigned short, unsigned short, unsigned short)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[dc]"></a>FTC_RC::check_sticks()</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, ftc_rc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[dd]"></a>FTC_RC::CheckAUX()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, ftc_rc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
</UL>

<P><STRONG><a name="[e1]"></a>FTC_Loop()</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_50Hz()
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_100Hz()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_200Hz()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_500Hz()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_1000Hz()
</UL>

<P><STRONG><a name="[e2]"></a>FTC_Scheduler::FTC_Scheduler()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftc_scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___17_FTC_Scheduler_cpp_463cec18
</UL>

<P><STRONG><a name="[1d7]"></a>FTC_Scheduler::FTC_Scheduler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_scheduler.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>safe_asin(float)</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>

<P><STRONG><a name="[e7]"></a>constrain_float(float, float, float)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1d8]"></a>constrain_int16(short, short, short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ftc_math.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>constrain_uint16(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Motor::writeMotor(unsigned short, int, int, int)
</UL>

<P><STRONG><a name="[bc]"></a>constrain_int32(int, int, int)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[bd]"></a>applyDeadband(int, int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[70]"></a>radians(float)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Get_Gyro_in_dps(Vector3&lang;float&rang;)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Get_Accel_Ef()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[e8]"></a>degrees(float)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>

<P><STRONG><a name="[e9]"></a>sq(float)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous4(float, float, float, float)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3(float, float, float)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2(float, float)
</UL>

<P><STRONG><a name="[ea]"></a>pythagorous2(float, float)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[ec]"></a>pythagorous3(float, float, float)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[ed]"></a>pythagorous4(float, float, float, float)</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, ftc_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[156]"></a>SysTick_IRQ()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ac]"></a>GetSysTime_us()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, board.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs(unsigned)
</UL>

<P><STRONG><a name="[f0]"></a>DelayUs(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelayUs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSysTime_us()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs(unsigned)
</UL>

<P><STRONG><a name="[f1]"></a>DelayMs(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DelayMs(unsigned) &rArr; DelayUs(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Init()
</UL>

<P><STRONG><a name="[60]"></a>FTC_Hexacopter_board_Init()</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = FTC_Hexacopter_board_Init() &rArr; FTC_UART3::Init(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::Init()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Init()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f9]"></a>FTC_ADC_Init()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ftc_drv_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FTC_ADC_Init() &rArr; ADC1_Mode_Config() &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[da]"></a>FTC_ADC_Battery()</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, ftc_drv_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop_100Hz()
</UL>

<P><STRONG><a name="[10f]"></a>InitCurrWrAddress()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = InitCurrWrAddress()
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
</UL>

<P><STRONG><a name="[cb]"></a>EE_ReadVariable(unsigned short, unsigned short*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EE_ReadVariable(unsigned short, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_FirstInitFlag()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_PID()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_ACC_OFFSET()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_GYRO_OFFSET()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[115]"></a>__EE_Init()</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = __EE_Init() &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format()
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Init()
</UL>

<P><STRONG><a name="[fb]"></a>EE_Init()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EE_Init() &rArr; __EE_Init() &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurrWrAddress()
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[c9]"></a>EE_WriteVariable(unsigned short, unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = EE_WriteVariable(unsigned short, unsigned short) &rArr; EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_GYRO_OFFSET()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_ACC_OFFSET()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_FirstInitFlag()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_PID()
</UL>

<P><STRONG><a name="[125]"></a>FTC_I2C_Soft::FTC_I2C_Soft()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_FTC_Drv_MS5611_cpp_ms5611
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::FTC_MPU6050()
</UL>

<P><STRONG><a name="[1d9]"></a>FTC_I2C_Soft::FTC_I2C_Soft__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_drv_i2c_soft.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>FTC_I2C_Soft::Init()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_I2C_Soft::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[118]"></a>FTC_I2C_Soft::I2C_delay()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Ack()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_ReadByte()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_NoAck()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_SendByte(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_WaitAck()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Stop()
</UL>

<P><STRONG><a name="[117]"></a>FTC_I2C_Soft::I2C_Stop()</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FTC_I2C_Soft::I2C_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[119]"></a>FTC_I2C_Soft::I2C_WaitAck()</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FTC_I2C_Soft::I2C_WaitAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11a]"></a>FTC_I2C_Soft::I2C_SendByte(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11b]"></a>FTC_I2C_Soft::I2C_Start()</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FTC_I2C_Soft::I2C_Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char) &rArr; FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_SendByte(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_WaitAck()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Init(unsigned short, unsigned short)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Start_P()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Reset()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Start_T()
</UL>

<P><STRONG><a name="[11d]"></a>FTC_I2C_Soft::I2C_NoAck()</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FTC_I2C_Soft::I2C_NoAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11e]"></a>FTC_I2C_Soft::I2C_ReadByte()</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11f]"></a>FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, ftc_drv_i2c_soft.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_ReadByte()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_NoAck()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_SendByte(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_WaitAck()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Gyro_Data()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Acc_Data()
</UL>

<P><STRONG><a name="[120]"></a>FTC_I2C_Soft::I2C_Ack()</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FTC_I2C_Soft::I2C_Ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_delay()
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[121]"></a>FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 28 bytes, ftc_drv_i2c_soft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Ack()
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_ReadByte()
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_NoAck()
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_SendByte(unsigned char)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_WaitAck()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Stop()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Adc_P()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Adc_T()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Prom()
</UL>

<P><STRONG><a name="[f8]"></a>FTC_LED::Init()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ftc_drv_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FTC_LED::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[65]"></a>FTC_LED::ON1()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::Pilot_Light()
</UL>

<P><STRONG><a name="[66]"></a>FTC_LED::ON2()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::Pilot_Light()
</UL>

<P><STRONG><a name="[67]"></a>FTC_LED::OFF1()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::Pilot_Light()
</UL>

<P><STRONG><a name="[68]"></a>FTC_LED::OFF2()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::Pilot_Light()
</UL>

<P><STRONG><a name="[124]"></a>FTC_MPU6050::FTC_MPU6050()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, ftc_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_MPU6050::FTC_MPU6050()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::FTC_I2C_Soft()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_FTC_Drv_MPU6050_cpp_mpu6050
</UL>

<P><STRONG><a name="[1da]"></a>FTC_MPU6050::FTC_MPU6050__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_drv_mpu6050.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>FTC_MPU6050::delayms(unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ftc_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FTC_MPU6050::delayms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Init(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[9e]"></a>FTC_MPU6050::Init(unsigned short, unsigned short)</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ftc_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = FTC_MPU6050::Init(unsigned short, unsigned short) &rArr; FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char) &rArr; FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::delayms(unsigned short)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::sensor_Init()
</UL>

<P><STRONG><a name="[127]"></a>FTC_MPU6050::CalOffset_Acc()</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_ACC_OFFSET()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::operator ()(short, short, short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Acc_Data()
</UL>

<P><STRONG><a name="[a1]"></a>FTC_MPU6050::Read_Acc_Data()</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::updateSensor()
</UL>

<P><STRONG><a name="[12a]"></a>FTC_MPU6050::CalOffset_Gyro()</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_GYRO_OFFSET()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::operator ()(short, short, short)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Gyro_Data()
</UL>

<P><STRONG><a name="[a2]"></a>FTC_MPU6050::Read_Gyro_Data()</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Read(unsigned char, unsigned char)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::updateSensor()
</UL>

<P><STRONG><a name="[a4]"></a>FTC_MPU6050::Get_Acc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::updateSensor()
</UL>

<P><STRONG><a name="[a3]"></a>FTC_MPU6050::Get_Gyro()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::updateSensor()
</UL>

<P><STRONG><a name="[ad]"></a>FTC_MPU6050::Get_Gyro_in_dps(Vector3&lang;float&rang;)</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, ftc_drv_mpu6050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians(float)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[12b]"></a>FTC_MS5611::Start_T()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTC_MS5611::Start_T() &rArr; FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char) &rArr; FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Init()
</UL>

<P><STRONG><a name="[12c]"></a>FTC_MS5611::Read_Prom()</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ftc_drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FTC_MS5611::Read_Prom() &rArr; FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Init()
</UL>

<P><STRONG><a name="[12d]"></a>FTC_MS5611::Reset()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FTC_MS5611::Reset() &rArr; FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char) &rArr; FTC_I2C_Soft::I2C_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Init()
</UL>

<P><STRONG><a name="[b7]"></a>FTC_MS5611::Init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FTC_MS5611::Init() &rArr; FTC_MS5611::Read_Prom() &rArr; FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; FTC_I2C_Soft::I2C_ReadByte()
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Reset()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Prom()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Start_T()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::sensor_Init()
</UL>

<P><STRONG><a name="[12e]"></a>FTC_MS5611::Start_P()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Single_Write(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
</UL>

<P><STRONG><a name="[12f]"></a>FTC_MS5611::Read_Adc_T()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
</UL>

<P><STRONG><a name="[130]"></a>FTC_MS5611::BaroAltCalculate()</STRONG> (Thumb, 452 bytes, Stack size 80 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
</UL>

<P><STRONG><a name="[132]"></a>FTC_MS5611::Read_Adc_P()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::I2C_Mult_Read(unsigned char, unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Update()
</UL>

<P><STRONG><a name="[be]"></a>FTC_MS5611::Update()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Adc_P()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Read_Adc_T()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Start_P()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::Start_T()
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[bf]"></a>FTC_MS5611::Get_BaroAlt()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ftc_drv_ms5611.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[133]"></a>FTC_NRF::Write_Reg(unsigned char, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ftc_drv_nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FTC_NRF::Write_Reg(unsigned char, unsigned char) &rArr; FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_L()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_H()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check_Event()
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[137]"></a>FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ftc_drv_nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char) &rArr; FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_L()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_H()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket(unsigned char*, unsigned char)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket_AP(unsigned char*, unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f5]"></a>FTC_NRF::Init(unsigned char, unsigned char)</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, ftc_drv_nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FTC_NRF::Init(unsigned char, unsigned char) &rArr; FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char) &rArr; FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_L()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_H()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Reg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[6b]"></a>FTC_NRF::TxPacket(unsigned char*, unsigned char)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_L()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_H()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Data(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[13a]"></a>FTC_NRF::TxPacket_AP(unsigned char*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_L()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_H()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[13b]"></a>FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_L()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_H()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check_Event()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check()
</UL>

<P><STRONG><a name="[13c]"></a>FTC_NRF::Check()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[13d]"></a>FTC_NRF::Read_Reg(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_L()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_H()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Check_Event()
</UL>

<P><STRONG><a name="[7a]"></a>FTC_NRF::Check_Event()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ftc_drv_nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Reg(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Reg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Check_Event()
</UL>

<P><STRONG><a name="[f6]"></a>FTC_PWM::out_Init(unsigned short)</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, ftc_drv_pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FTC_PWM::out_Init(unsigned short) &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[b3]"></a>FTC_PWM::SetPwm(short*)</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, ftc_drv_pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Motor::writeMotor(unsigned short, int, int, int)
</UL>

<P><STRONG><a name="[f4]"></a>FTC_SPI2::Init()</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FTC_SPI2::Init() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[135]"></a>FTC_SPI2::RW(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FTC_SPI2::RW(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Reg(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Reg(unsigned char, unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[139]"></a>FTC_SPI2::CE_H()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_SPI2::CE_H()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket(unsigned char*, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket_AP(unsigned char*, unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[138]"></a>FTC_SPI2::CE_L()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_SPI2::CE_L()
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket(unsigned char*, unsigned char)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::TxPacket_AP(unsigned char*, unsigned char)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Init(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[136]"></a>FTC_SPI2::CSN_H()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_SPI2::CSN_H()
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Reg(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Reg(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[134]"></a>FTC_SPI2::CSN_L()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_spi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_SPI2::CSN_L()
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Reg(unsigned char)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Read_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Buf(unsigned char, unsigned char*, unsigned char)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_NRF::Write_Reg(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[f7]"></a>FTC_UART3::Init(unsigned)</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, ftc_drv_uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FTC_UART3::Init(unsigned) &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[157]"></a>FTC_UART3::IRQ()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, ftc_drv_uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_UART3::IRQ()
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[ba]"></a>FTC_UART3::Put_Char(unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ftc_drv_uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Put_String(unsigned char*)
</UL>

<P><STRONG><a name="[154]"></a>FTC_UART3::Put_String(unsigned char*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ftc_drv_uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Put_Char(unsigned char)
</UL>

<P><STRONG><a name="[155]"></a>FTC_UART3::Put_Buf(unsigned char*, unsigned char)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ftc_drv_uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>

<P><STRONG><a name="[f]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART3_IRQHandler &rArr; FTC_UART3::IRQ()
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::IRQ()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[153]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
</UL>

<P><STRONG><a name="[1db]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>ADC_DeInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[104]"></a>ADC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1de]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>ADC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[107]"></a>ADC_DMACmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1df]"></a>ADC_ITConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[10a]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[10b]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[10c]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[10d]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1e0]"></a>ADC_GetSoftwareStartConvStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>ADC_DiscModeChannelCountConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>ADC_DiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 184 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1e3]"></a>ADC_ExternalTrigConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>ADC_GetConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>ADC_GetDualModeConversionValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>ADC_AutoInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>ADC_InjectedDiscModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>ADC_ExternalTrigInjectedConvConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>ADC_ExternalTrigInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>ADC_SoftwareStartInjectedConvCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>ADC_GetSoftwareStartInjectedConvCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>ADC_InjectedChannelConfig</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>ADC_InjectedSequencerLengthConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>ADC_SetInjectedOffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>ADC_GetInjectedConversionValue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>ADC_AnalogWatchdogCmd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>ADC_AnalogWatchdogThresholdsConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>ADC_AnalogWatchdogSingleChannelConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>ADC_TempSensorVrefintCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>ADC_GetITStatus</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>ADC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[102]"></a>DMA_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1f8]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>DMA_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[1f9]"></a>DMA_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>DMA_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>DMA_GetITStatus</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>FLASH_SetLatency</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>FLASH_HalfCycleAccessCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>FLASH_PrefetchBufferCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>FLASH_Unlock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[203]"></a>FLASH_UnlockBank1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>FLASH_LockBank1</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[15a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_UserOptionByteConfig
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadOutProtection
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EnableWriteProtection
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramOptionByteData
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllPages
</UL>

<P><STRONG><a name="[112]"></a>FLASH_ErasePage</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_ErasePage &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format()
</UL>

<P><STRONG><a name="[15c]"></a>FLASH_EraseAllPages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[15d]"></a>FLASH_WaitForLastBank1Operation</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseAllBank1Pages
</UL>

<P><STRONG><a name="[15e]"></a>FLASH_EraseAllBank1Pages</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastBank1Operation
</UL>

<P><STRONG><a name="[160]"></a>FLASH_GetReadOutProtectionStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseOptionBytes
</UL>

<P><STRONG><a name="[15f]"></a>FLASH_EraseOptionBytes</STRONG> (Thumb, 150 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadOutProtectionStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[161]"></a>FLASH_ProgramWord</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[113]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Format()
</UL>

<P><STRONG><a name="[162]"></a>FLASH_ProgramOptionByteData</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[163]"></a>FLASH_EnableWriteProtection</STRONG> (Thumb, 200 bytes, Stack size 28 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[164]"></a>FLASH_ReadOutProtection</STRONG> (Thumb, 156 bytes, Stack size 12 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[165]"></a>FLASH_UserOptionByteConfig</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32f10x_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[206]"></a>FLASH_GetUserOptionByte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>FLASH_GetWriteProtectionOptionByte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>FLASH_GetPrefetchBufferStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>FLASH_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>FLASH_GetStatus</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f10x_flash.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[167]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[ff]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::Init()
</UL>

<P><STRONG><a name="[20d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::ON2()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::ON1()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_H()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_H()
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
</UL>

<P><STRONG><a name="[122]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::OFF2()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::OFF1()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CSN_L()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::CE_L()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::Init()
</UL>

<P><STRONG><a name="[212]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[168]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[21c]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[225]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[105]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Mode_Config()
</UL>

<P><STRONG><a name="[227]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[fd]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config()
</UL>

<P><STRONG><a name="[fe]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GPIO_Config()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_LED::Init()
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::Init()
</UL>

<P><STRONG><a name="[13e]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[159]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[16b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
</UL>

<P><STRONG><a name="[22b]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[14a]"></a>SPI_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
</UL>

<P><STRONG><a name="[16c]"></a>I2S_Init</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[231]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>SPI_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::Init()
</UL>

<P><STRONG><a name="[233]"></a>I2S_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>SPI_I2S_SendData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>

<P><STRONG><a name="[14e]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>

<P><STRONG><a name="[236]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>SPI_TransmitCRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>SPI_CalculateCRC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>SPI_GetCRC</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_SPI2::RW(unsigned char)
</UL>

<P><STRONG><a name="[23e]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13f]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[140]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[142]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[144]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[146]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[176]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[174]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[172]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[170]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16e]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[177]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[241]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[246]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[178]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[17a]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[17c]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[17b]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[17d]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[24c]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[253]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[143]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[145]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[147]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_PWM::out_Init(unsigned short)
</UL>

<P><STRONG><a name="[256]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[263]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27b]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[14f]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
</UL>

<P><STRONG><a name="[280]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
</UL>

<P><STRONG><a name="[281]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
</UL>

<P><STRONG><a name="[151]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Put_Char(unsigned char)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Init(unsigned)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_UART3::Put_Buf(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[282]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock() &rArr; SetSysClockTo72()
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[298]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[185]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[299]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[181]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[183]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[29a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[29d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[5b]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[5f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[29e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>FTC_Filter::LPF2ndData_t::LPF2ndData_t()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ftc_imu.o(i._ZN10FTC_Filter12LPF2ndData_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_Filter::LPF2ndData_t::LPF2ndData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::FTC_Navgation()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::FTC_IMU()
</UL>

<P><STRONG><a name="[2a0]"></a>FTC_Filter::LPF2ndData_t::LPF2ndData_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_imu.o(i._ZN10FTC_Filter12LPF2ndData_tC1Ev), UNUSED)

<P><STRONG><a name="[2a1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>FTC_Filter::LPF4thData_t::LPF4thData_t()</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ftc_imu.o(i._ZN10FTC_Filter12LPF4thData_tC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_Filter::LPF4thData_t::LPF4thData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::FTC_IMU()
</UL>

<P><STRONG><a name="[2a2]"></a>FTC_Filter::LPF4thData_t::LPF4thData_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftc_imu.o(i._ZN10FTC_Filter12LPF4thData_tC1Ev), UNUSED)

<P><STRONG><a name="[92]"></a>FTC_PID::set_pid(float, float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ftc_flycontrol.o(i._ZN7FTC_PID7set_pidEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FTC_PID::set_pid(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::PID_Reset()
</UL>

<P><STRONG><a name="[43]"></a>FTC_PID::FTC_PID()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ftc_flycontrol.o(i._ZN7FTC_PIDC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> ftc_flycontrol.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>FTC_PID::FTC_PID__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_flycontrol.o(i._ZN7FTC_PIDC1Ev), UNUSED)

<P><STRONG><a name="[18a]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[e4]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ftc_math.o(i.__ARM_isnanf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[94]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::FTC_FlyControl()
</UL>

<P><STRONG><a name="[128]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
</UL>

<P><STRONG><a name="[187]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[189]"></a>__mathlib_rredf2</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, rredf.o(i.__mathlib_rredf2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[e6]"></a>asinf</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, asinf.o(i.asinf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[71]"></a>cosf</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, cosf.o(i.cosf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[2a4]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, powf.o(i.powf), UNUSED)

<P><STRONG><a name="[131]"></a>powf</STRONG> (Thumb, 1538 bytes, Stack size 48 bytes, powf.o(i.powf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
</UL>

<P><STRONG><a name="[74]"></a>sinf</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, sinf.o(i.sinf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous4(float, float, float, float)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3(float, float, float)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2(float, float)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[b0]"></a>Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, ftc_matrix3.o(t._ZN7Matrix3IfE10from_eulerERK7Vector3IfE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Get_Accel_Ef()
</UL>

<P><STRONG><a name="[aa]"></a>Vector3&lang;double&rang;::Vector3()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ftc_imu.o(t._ZN7Vector3IdEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF4thData_t::LPF4thData_t()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[2a5]"></a>Vector3&lang;double&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_imu.o(t._ZN7Vector3IdEC1Ev), UNUSED)

<P><STRONG><a name="[18f]"></a>Vector3&lang;float&rang;::Vector3(float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ftc_matrix3.o(t._ZN7Vector3IfEC1Efff), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[2a6]"></a>Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_matrix3.o(t._ZN7Vector3IfEC1Efff), UNUSED)

<P><STRONG><a name="[9a]"></a>Vector3&lang;float&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftc_imu.o(t._ZN7Vector3IfEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::FTC_Navgation()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF2ndData_t::LPF2ndData_t()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Get_Accel_Ef()
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::FTC_IMU()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::FTC_MPU6050()
</UL>

<P><STRONG><a name="[2a7]"></a>Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_imu.o(t._ZN7Vector3IfEC1Ev), UNUSED)

<P><STRONG><a name="[b5]"></a>Vector3&lang;float&rang;::operator ()(float, float, float)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ftc_navgation.o(t._ZN7Vector3IfEclEfff))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::Reset()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::FTC_Navgation()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Gyro_Data()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Acc_Data()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
</UL>

<P><STRONG><a name="[c6]"></a>Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ftc_vector3.o(t._ZN7Vector3IfEpLERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
</UL>

<P><STRONG><a name="[95]"></a>Vector3&lang;short&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ftc_flycontrol.o(t._ZN7Vector3IsEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::FTC_FlyControl()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::FTC_MPU6050()
</UL>

<P><STRONG><a name="[2a8]"></a>Vector3&lang;short&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ftc_flycontrol.o(t._ZN7Vector3IsEC1Ev), UNUSED)

<P><STRONG><a name="[129]"></a>Vector3&lang;short&rang;::operator ()(short, short, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ftc_drv_mpu6050.o(t._ZN7Vector3IsEclEsss), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
</UL>

<P><STRONG><a name="[b1]"></a>Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ftc_matrix3.o(t._ZNK7Matrix3IfEmlERK7Vector3IfE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::Get_Accel_Ef()
</UL>

<P><STRONG><a name="[8e]"></a>Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ftc_vector3.o(t._ZNK7Vector3IfEmiERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd(FTC_Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[ab]"></a>Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ftc_vector3.o(t._ZNK7Vector3IfEmlERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
</UL>

<P><STRONG><a name="[8a]"></a>Vector3&lang;float&rang;::operator *(float) const</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ftc_vector3.o(t._ZNK7Vector3IfEmlEf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd(FTC_Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[8c]"></a>Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, ftc_vector3.o(t._ZNK7Vector3IfEplERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd(FTC_Filter::LPF2ndData_t*, Vector3&lang;float&rang;)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getDeltaT(unsigned)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[190]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[193]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[198]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[196]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
</UL>

<P><STRONG><a name="[2a9]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getDeltaT(unsigned)
</UL>

<P><STRONG><a name="[2aa]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[10e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
</UL>

<P><STRONG><a name="[197]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2ab]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getDeltaT(unsigned)
</UL>

<P><STRONG><a name="[199]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[192]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[195]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[19a]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[19c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_Factor_Cal(float, float)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st_Factor_Cal(float, float)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous4(float, float, float, float)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3(float, float, float)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous2(float, float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[19e]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1a4]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_PID()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_Factor_Cal(float, float)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st_Factor_Cal(float, float)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[1a2]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[1a3]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::AltHoldReset()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[1a5]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[18c]"></a>_ffix_r</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffixr), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_PID()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1a6]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Gyro_Data()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Read_Acc_Data()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2ac]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::READ_PID()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Gyro()
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[2ad]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[e5]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[1a7]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[1aa]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler(const Vector3&lang;float&rang;&)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::Get_Gyro_in_dps(Vector3&lang;float&rang;)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_2nd_Factor_Cal(float, float, FTC_Filter::LPF2ndData_t*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st_Factor_Cal(float, float)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Param::SAVE_PID()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radians(float)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_Status(float, float, float, int, unsigned char, unsigned char)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Send_PID(unsigned char, float, float, float, float, float, float, float, float, float)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;degrees(float)
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1a8]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix_r
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[191]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[c5]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[1a9]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[18b]"></a>_frnd</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, frnd.o(x$fpl$frnd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Receive_Anl(unsigned char*, unsigned char)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MS5611::BaroAltCalculate()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1ab]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[18e]"></a>_fsqrt</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, fsqrt.o(x$fpl$fsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::CF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Ultra_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::Baro_LPF_2nd(FTC_Filter::LPF2ndData_t*, float)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Filter::LPF_1st(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::CalOffset_Acc()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[1ad]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[188]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powf
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
</UL>

<P><STRONG><a name="[1ae]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[46]"></a>__sti___14_FTC_Config_cpp_ftc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ftc_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___14_FTC_Config_cpp_ftc
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::FTC_Config()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_config.o(.init_array)
</UL>
<P><STRONG><a name="[47]"></a>__sti___18_FTC_FlyControl_cpp_fc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ftc_flycontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __sti___18_FTC_FlyControl_cpp_fc &rArr; FTC_FlyControl::FTC_FlyControl() &rArr; FTC_FlyControl::PID_Reset() &rArr; FTC_PID::set_pid(float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::FTC_FlyControl()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_flycontrol.o(.init_array)
</UL>
<P><STRONG><a name="[48]"></a>__sti___11_FTC_IMU_cpp_imu</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ftc_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___11_FTC_IMU_cpp_imu &rArr; FTC_IMU::FTC_IMU() &rArr; FTC_Filter::LPF4thData_t::LPF4thData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::FTC_IMU()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_imu.o(.init_array)
</UL>
<P><STRONG><a name="[49]"></a>__sti___17_FTC_Navgation_cpp_nav</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ftc_navgation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___17_FTC_Navgation_cpp_nav &rArr; FTC_Navgation::FTC_Navgation() &rArr; FTC_Filter::LPF2ndData_t::LPF2ndData_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::FTC_Navgation()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_navgation.o(.init_array)
</UL>
<P><STRONG><a name="[4a]"></a>__sti___10_FTC_RC_cpp_rc</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ftc_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___10_FTC_RC_cpp_rc &rArr; FTC_RC::FTC_RC() &rArr; FTC_RC::Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::FTC_RC()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_rc.o(.init_array)
</UL>
<P><STRONG><a name="[d5]"></a>FTC_Loop_1000Hz()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Data_Exchange()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Check_Event()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop()
</UL>

<P><STRONG><a name="[d6]"></a>FTC_Loop_500Hz()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Navgation::update()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::getAttitude()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_IMU::updateSensor()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::Attitude_Inner_Loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop()
</UL>

<P><STRONG><a name="[d8]"></a>FTC_Loop_200Hz()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::Attitude_Outter_Loop()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop()
</UL>

<P><STRONG><a name="[d9]"></a>FTC_Loop_100Hz()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Battery()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop()
</UL>

<P><STRONG><a name="[db]"></a>FTC_Loop_50Hz()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ftc_scheduler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::CheckAUX()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::check_sticks()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_RC::Cal_Command()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::Altitude_Inner_Loop()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_FlyControl::Altitude_Outter_Loop()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_DT::Failsafe_Check()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Config::Pilot_Light()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Loop()
</UL>

<P><STRONG><a name="[4b]"></a>__sti___17_FTC_Scheduler_cpp_463cec18</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, ftc_scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___17_FTC_Scheduler_cpp_463cec18
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Scheduler::FTC_Scheduler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_scheduler.o(.init_array)
</UL>
<P><STRONG><a name="[ee]"></a>cycleCounterInit()</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cycleCounterInit() &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_Hexacopter_board_Init()
</UL>

<P><STRONG><a name="[fc]"></a>ADC1_GPIO_Config()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ftc_drv_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC1_GPIO_Config() &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Init()
</UL>

<P><STRONG><a name="[100]"></a>ADC1_Mode_Config()</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, ftc_drv_adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ADC1_Mode_Config() &rArr; ADC_RegularChannelConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_ADC_Init()
</UL>

<P><STRONG><a name="[110]"></a>EE_FindValidPage(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurrWrAddress()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[111]"></a>EE_Format()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EE_Format() &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
</UL>

<P><STRONG><a name="[114]"></a>EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__EE_Init()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_PageTransfer(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[116]"></a>EE_PageTransfer(unsigned short, unsigned short)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, ftc_drv_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EE_PageTransfer(unsigned short, unsigned short) &rArr; EE_VerifyPageFullWriteVariable(unsigned short, unsigned short) &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_ReadVariable(unsigned short, unsigned short*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitCurrWrAddress()
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_VerifyPageFullWriteVariable(unsigned short, unsigned short)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_FindValidPage(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_WriteVariable(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[4c]"></a>__sti___19_FTC_Drv_MPU6050_cpp_mpu6050</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, ftc_drv_mpu6050.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __sti___19_FTC_Drv_MPU6050_cpp_mpu6050 &rArr; FTC_MPU6050::FTC_MPU6050()
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_MPU6050::FTC_MPU6050()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_drv_mpu6050.o(.init_array)
</UL>
<P><STRONG><a name="[4d]"></a>__sti___18_FTC_Drv_MS5611_cpp_ms5611</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ftc_drv_ms5611.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___18_FTC_Drv_MS5611_cpp_ms5611
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FTC_I2C_Soft::FTC_I2C_Soft()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ftc_drv_ms5611.o(.init_array)
</UL>
<P><STRONG><a name="[175]"></a>TI4_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[173]"></a>TI3_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[171]"></a>TI2_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[16f]"></a>TI1_Config(TIM_TypeDef*, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[180]"></a>SetSysClockTo72()</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72()
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock()
</UL>

<P><STRONG><a name="[17f]"></a>SetSysClock()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock() &rArr; SetSysClockTo72()
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[19b]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[194]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1ac]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[19f]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
